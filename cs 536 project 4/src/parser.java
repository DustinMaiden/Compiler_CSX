
//----------------------------------------------------
// The following code was generated by CUP v0.10f
// Tue Apr 21 04:23:11 CDT 2015
//----------------------------------------------------

import java_cup.runtime.*;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 5},     {17, 2},     {17, 1},     {9, 2}, 
        {9, 0},     {16, 2},     {16, 0},     {15, 9},     {15, 10}, 
        {15, 9},     {15, 10},     {14, 3},     {14, 1},     {13, 2}, 
        {13, 4},     {10, 3},     {10, 5},     {10, 6},     {10, 5}, 
        {2, 2},     {2, 0},     {3, 5},     {3, 7},     {3, 5}, 
        {3, 7},     {3, 4},     {3, 3},     {3, 3},     {3, 5}, 
        {3, 5},     {3, 4},     {3, 5},     {3, 2},     {3, 3}, 
        {3, 3},     {3, 3},     {3, 5},     {11, 1},     {11, 1}, 
        {11, 1},     {18, 3},     {18, 1},     {19, 3},     {19, 1}, 
        {20, 3},     {20, 1},     {4, 3},     {4, 3},     {4, 1}, 
        {5, 3},     {5, 3},     {5, 3},     {5, 3},     {5, 3}, 
        {5, 3},     {5, 1},     {6, 3},     {6, 3},     {6, 1}, 
        {21, 3},     {21, 3},     {21, 1},     {22, 2},     {22, 4}, 
        {22, 1},     {7, 1},     {7, 3},     {7, 4},     {7, 1}, 
        {7, 1},     {7, 1},     {7, 1},     {7, 1},     {7, 3}, 
        {23, 1},     {23, 4},     {8, 1},     {12, 1},     {12, 0}
      };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{34,3,-1,0},
    /*1*/{0,197,-1,0},
    /*2*/{2,4,-1,0},
    /*3*/{6,-78,7,-78,8,-78,9,-78,10,-78,12,-78,13,-78,14,-78,15,-78,19,-78,20,-78,21,-78,22,-78,23,-78,24,-78,25,-78,26,-78,27,-78,28,-78,29,-78,31,-78,45,-78,46,-78,-1,0},
    /*4*/{10,6,-1,0},
    /*5*/{11,-8,17,16,18,11,33,7,35,8,43,14,-1,0},
    /*6*/{2,-41,8,-41,-1,0},
    /*7*/{2,4,-1,0},
    /*8*/{11,-8,17,16,18,11,33,7,43,14,-1,0},
    /*9*/{11,189,-1,0},
    /*10*/{2,-40,8,-40,-1,0},
    /*11*/{11,-8,17,16,18,11,33,7,35,8,43,14,-1,0},
    /*12*/{11,-4,-1,0},
    /*13*/{2,4,-1,0},
    /*14*/{2,4,-1,0},
    /*15*/{2,-39,8,-39,-1,0},
    /*16*/{6,18,7,19,9,21,27,20,-1,0},
    /*17*/{2,-17,10,-17,11,-17,16,-17,17,-17,18,-17,32,-17,33,-17,35,-17,36,-17,39,-17,40,-17,41,-17,43,-17,44,-17,-1,0},
    /*18*/{8,82,17,16,18,11,33,7,-1,0},
    /*19*/{3,78,-1,0},
    /*20*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*21*/{6,-67,8,-67,12,-67,13,-67,14,-67,15,-67,19,-67,21,-67,22,-67,24,-67,25,-67,28,-67,29,-67,31,-67,45,-67,46,-67,-1,0},
    /*22*/{6,-60,8,-60,12,-60,13,-60,14,-60,15,-60,19,-60,21,-60,22,-60,24,-60,25,-60,28,-60,29,-60,31,-60,45,57,46,58,-1,0},
    /*23*/{6,-70,8,-70,12,-70,13,-70,14,-70,15,-70,19,-70,21,-70,22,-70,24,-70,25,-70,28,-70,29,-70,31,-70,45,-70,46,-70,-1,0},
    /*24*/{6,-50,8,-50,19,-50,21,-50,22,-50,31,-50,-1,0},
    /*25*/{6,-72,8,-72,12,-72,13,-72,14,-72,15,-72,19,-72,21,-72,22,-72,24,-72,25,-72,28,-72,29,-72,31,-72,45,-72,46,-72,-1,0},
    /*26*/{6,-63,8,-63,12,-63,13,-63,14,-63,15,-63,19,-63,21,-63,22,-63,24,-63,25,-63,28,-63,29,-63,31,-63,45,-63,46,-63,-1,0},
    /*27*/{6,-73,8,-73,12,-73,13,-73,14,-73,15,-73,19,-73,21,-73,22,-73,24,-73,25,-73,28,-73,29,-73,31,-73,45,-73,46,-73,-1,0},
    /*28*/{6,-76,7,68,8,-76,12,-76,13,-76,14,-76,15,-76,19,-76,21,-76,22,-76,24,-76,25,-76,27,69,28,-76,29,-76,31,-76,45,-76,46,-76,-1,0},
    /*29*/{6,-74,8,-74,12,-74,13,-74,14,-74,15,-74,19,-74,21,-74,22,-74,24,-74,25,-74,28,-74,29,-74,31,-74,45,-74,46,-74,-1,0},
    /*30*/{6,-57,8,-57,12,52,13,55,14,49,15,54,19,-57,21,-57,22,-57,24,51,25,50,28,53,29,48,31,-57,-1,0},
    /*31*/{6,-71,8,-71,12,-71,13,-71,14,-71,15,-71,19,-71,21,-71,22,-71,24,-71,25,-71,28,-71,29,-71,31,-71,45,-71,46,-71,-1,0},
    /*32*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*33*/{6,46,19,41,22,43,-1,0},
    /*34*/{6,-66,8,-66,12,-66,13,-66,14,-66,15,-66,19,-66,21,-66,22,-66,24,-66,25,-66,28,-66,29,-66,31,-66,45,-66,46,-66,-1,0},
    /*35*/{2,4,3,24,4,32,5,26,7,36,17,16,18,11,30,33,33,7,38,30,42,28,-1,0},
    /*36*/{8,42,19,41,22,43,-1,0},
    /*37*/{8,39,-1,0},
    /*38*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*39*/{6,-65,8,-65,12,-65,13,-65,14,-65,15,-65,19,-65,21,-65,22,-65,24,-65,25,-65,28,-65,29,-65,31,-65,45,-65,46,-65,-1,0},
    /*40*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*41*/{6,-75,8,-75,12,-75,13,-75,14,-75,15,-75,19,-75,21,-75,22,-75,24,-75,25,-75,28,-75,29,-75,31,-75,45,-75,46,-75,-1,0},
    /*42*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*43*/{6,-48,8,-48,19,-48,21,-48,22,-48,31,-48,-1,0},
    /*44*/{6,-49,8,-49,19,-49,21,-49,22,-49,31,-49,-1,0},
    /*45*/{2,-18,10,-18,11,-18,16,-18,17,-18,18,-18,32,-18,33,-18,35,-18,36,-18,39,-18,40,-18,41,-18,43,-18,44,-18,-1,0},
    /*46*/{6,-64,8,-64,12,-64,13,-64,14,-64,15,-64,19,-64,21,-64,22,-64,24,-64,25,-64,28,-64,29,-64,31,-64,45,-64,46,-64,-1,0},
    /*47*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*48*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*49*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*50*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*51*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*52*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*53*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*54*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*55*/{6,-59,8,-59,12,-59,13,-59,14,-59,15,-59,19,-59,21,-59,22,-59,24,-59,25,-59,28,-59,29,-59,31,-59,45,57,46,58,-1,0},
    /*56*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*57*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*58*/{6,-61,8,-61,12,-61,13,-61,14,-61,15,-61,19,-61,21,-61,22,-61,24,-61,25,-61,28,-61,29,-61,31,-61,45,-61,46,-61,-1,0},
    /*59*/{6,-62,8,-62,12,-62,13,-62,14,-62,15,-62,19,-62,21,-62,22,-62,24,-62,25,-62,28,-62,29,-62,31,-62,45,-62,46,-62,-1,0},
    /*60*/{6,-56,8,-56,12,52,13,55,19,-56,21,-56,22,-56,31,-56,-1,0},
    /*61*/{6,-53,8,-53,12,52,13,55,19,-53,21,-53,22,-53,31,-53,-1,0},
    /*62*/{6,-58,8,-58,12,-58,13,-58,14,-58,15,-58,19,-58,21,-58,22,-58,24,-58,25,-58,28,-58,29,-58,31,-58,45,57,46,58,-1,0},
    /*63*/{6,-54,8,-54,12,52,13,55,19,-54,21,-54,22,-54,31,-54,-1,0},
    /*64*/{6,-52,8,-52,12,52,13,55,19,-52,21,-52,22,-52,31,-52,-1,0},
    /*65*/{6,-55,8,-55,12,52,13,55,19,-55,21,-55,22,-55,31,-55,-1,0},
    /*66*/{6,-51,8,-51,12,52,13,55,19,-51,21,-51,22,-51,31,-51,-1,0},
    /*67*/{2,4,3,24,4,32,5,26,7,36,8,74,30,33,38,30,42,28,-1,0},
    /*68*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*69*/{19,41,22,43,31,71,-1,0},
    /*70*/{6,-77,8,-77,9,-77,12,-77,13,-77,14,-77,15,-77,19,-77,21,-77,22,-77,23,-77,24,-77,25,-77,26,-77,28,-77,29,-77,31,-77,45,-77,46,-77,-1,0},
    /*71*/{8,-43,19,41,21,76,22,43,-1,0},
    /*72*/{8,75,-1,0},
    /*73*/{6,-68,8,-68,12,-68,13,-68,14,-68,15,-68,19,-68,21,-68,22,-68,24,-68,25,-68,28,-68,29,-68,31,-68,45,-68,46,-68,-1,0},
    /*74*/{6,-69,8,-69,12,-69,13,-69,14,-69,15,-69,19,-69,21,-69,22,-69,24,-69,25,-69,28,-69,29,-69,31,-69,45,-69,46,-69,-1,0},
    /*75*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*76*/{8,-42,-1,0},
    /*77*/{31,79,-1,0},
    /*78*/{6,80,-1,0},
    /*79*/{2,-19,10,-19,11,-19,16,-19,17,-19,18,-19,32,-19,33,-19,35,-19,36,-19,39,-19,40,-19,41,-19,43,-19,44,-19,-1,0},
    /*80*/{8,-14,21,171,-1,0},
    /*81*/{10,166,-1,0},
    /*82*/{2,4,-1,0},
    /*83*/{8,85,-1,0},
    /*84*/{10,86,-1,0},
    /*85*/{2,-6,10,-6,11,-6,16,-6,17,16,18,11,32,-6,33,7,35,8,36,-6,39,-6,40,-6,41,-6,44,-6,-1,0},
    /*86*/{2,-6,10,-6,11,-6,16,-6,17,16,18,11,32,-6,33,7,35,8,36,-6,39,-6,40,-6,41,-6,44,-6,-1,0},
    /*87*/{2,4,-1,0},
    /*88*/{2,4,10,90,11,-22,16,96,32,92,36,100,39,101,40,91,41,97,44,98,-1,0},
    /*89*/{2,-6,10,-6,11,-6,16,-6,17,16,18,11,32,-6,33,7,35,8,36,-6,39,-6,40,-6,41,-6,44,-6,-1,0},
    /*90*/{7,149,-1,0},
    /*91*/{2,4,-1,0},
    /*92*/{9,142,23,140,26,141,-1,0},
    /*93*/{11,137,-1,0},
    /*94*/{2,4,10,90,11,-22,16,96,32,92,36,100,39,101,40,91,41,97,44,98,-1,0},
    /*95*/{7,130,-1,0},
    /*96*/{2,4,3,24,4,32,5,26,6,127,7,36,30,33,38,30,42,28,-1,0},
    /*97*/{7,123,-1,0},
    /*98*/{7,112,9,-76,20,111,23,-76,26,-76,27,69,-1,0},
    /*99*/{2,4,-1,0},
    /*100*/{7,102,-1,0},
    /*101*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*102*/{8,107,-1,0},
    /*103*/{8,-47,19,41,21,105,22,43,-1,0},
    /*104*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*105*/{8,-46,-1,0},
    /*106*/{6,108,-1,0},
    /*107*/{2,-31,10,-31,11,-31,16,-31,32,-31,36,-31,37,-31,39,-31,40,-31,41,-31,44,-31,-1,0},
    /*108*/{6,110,-1,0},
    /*109*/{2,-37,10,-37,11,-37,16,-37,32,-37,36,-37,37,-37,39,-37,40,-37,41,-37,44,-37,-1,0},
    /*110*/{44,118,-1,0},
    /*111*/{2,4,3,24,4,32,5,26,7,36,8,114,30,33,38,30,42,28,-1,0},
    /*112*/{8,116,-1,0},
    /*113*/{6,115,-1,0},
    /*114*/{2,-32,10,-32,11,-32,16,-32,32,-32,36,-32,37,-32,39,-32,40,-32,41,-32,44,-32,-1,0},
    /*115*/{6,117,-1,0},
    /*116*/{2,-33,10,-33,11,-33,16,-33,32,-33,36,-33,37,-33,39,-33,40,-33,41,-33,44,-33,-1,0},
    /*117*/{7,119,-1,0},
    /*118*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*119*/{8,121,19,41,22,43,-1,0},
    /*120*/{2,4,10,90,16,96,32,92,36,100,39,101,40,91,41,97,44,98,-1,0},
    /*121*/{2,-26,10,-26,11,-26,16,-26,32,-26,36,-26,37,-26,39,-26,40,-26,41,-26,44,-26,-1,0},
    /*122*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*123*/{8,125,19,41,22,43,-1,0},
    /*124*/{2,4,10,90,16,96,32,92,36,100,39,101,40,91,41,97,44,98,-1,0},
    /*125*/{2,-25,10,-25,11,-25,16,-25,32,-25,36,-25,37,-25,39,-25,40,-25,41,-25,44,-25,-1,0},
    /*126*/{2,-34,10,-34,11,-34,16,-34,32,-34,36,-34,37,-34,39,-34,40,-34,41,-34,44,-34,-1,0},
    /*127*/{6,129,19,41,22,43,-1,0},
    /*128*/{2,-35,10,-35,11,-35,16,-35,32,-35,36,-35,37,-35,39,-35,40,-35,41,-35,44,-35,-1,0},
    /*129*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*130*/{8,132,19,41,22,43,-1,0},
    /*131*/{2,4,10,90,16,96,32,92,36,100,39,101,40,91,41,97,44,98,-1,0},
    /*132*/{2,-23,10,-23,11,-23,16,-23,32,-23,36,-23,37,134,39,-23,40,-23,41,-23,44,-23,-1,0},
    /*133*/{2,4,10,90,16,96,32,92,36,100,39,101,40,91,41,97,44,98,-1,0},
    /*134*/{2,-24,10,-24,11,-24,16,-24,32,-24,36,-24,37,-24,39,-24,40,-24,41,-24,44,-24,-1,0},
    /*135*/{11,-21,-1,0},
    /*136*/{6,139,11,-80,17,-80,18,-80,33,-80,43,-80,-1,0},
    /*137*/{11,-12,17,-12,18,-12,33,-12,43,-12,-1,0},
    /*138*/{2,-79,10,-79,11,-79,16,-79,17,-79,18,-79,32,-79,33,-79,36,-79,37,-79,39,-79,40,-79,41,-79,43,-79,44,-79,-1,0},
    /*139*/{6,146,-1,0},
    /*140*/{6,145,-1,0},
    /*141*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*142*/{6,144,19,41,22,43,-1,0},
    /*143*/{2,-27,10,-27,11,-27,16,-27,32,-27,36,-27,37,-27,39,-27,40,-27,41,-27,44,-27,-1,0},
    /*144*/{2,-28,10,-28,11,-28,16,-28,32,-28,36,-28,37,-28,39,-28,40,-28,41,-28,44,-28,-1,0},
    /*145*/{2,-29,10,-29,11,-29,16,-29,32,-29,36,-29,37,-29,39,-29,40,-29,41,-29,44,-29,-1,0},
    /*146*/{6,148,-1,0},
    /*147*/{2,-36,10,-36,11,-36,16,-36,32,-36,36,-36,37,-36,39,-36,40,-36,41,-36,44,-36,-1,0},
    /*148*/{2,4,-1,0},
    /*149*/{8,-45,21,155,-1,0},
    /*150*/{8,153,-1,0},
    /*151*/{8,-76,21,-76,27,69,-1,0},
    /*152*/{6,154,-1,0},
    /*153*/{2,-30,10,-30,11,-30,16,-30,32,-30,36,-30,37,-30,39,-30,40,-30,41,-30,44,-30,-1,0},
    /*154*/{2,4,-1,0},
    /*155*/{8,-44,-1,0},
    /*156*/{2,4,10,90,11,-22,16,96,32,92,36,100,39,101,40,91,41,97,44,98,-1,0},
    /*157*/{11,159,-1,0},
    /*158*/{2,-80,6,139,10,-80,11,-80,16,-80,32,-80,36,-80,37,-80,39,-80,40,-80,41,-80,44,-80,-1,0},
    /*159*/{2,-38,10,-38,11,-38,16,-38,32,-38,36,-38,37,-38,39,-38,40,-38,41,-38,44,-38,-1,0},
    /*160*/{6,18,9,21,27,20,-1,0},
    /*161*/{2,-5,10,-5,11,-5,16,-5,32,-5,36,-5,39,-5,40,-5,41,-5,44,-5,-1,0},
    /*162*/{8,-15,21,-15,27,164,-1,0},
    /*163*/{31,165,-1,0},
    /*164*/{8,-16,21,-16,-1,0},
    /*165*/{2,-6,10,-6,11,-6,16,-6,17,16,18,11,32,-6,33,7,35,8,36,-6,39,-6,40,-6,41,-6,44,-6,-1,0},
    /*166*/{2,4,10,90,11,-22,16,96,32,92,36,100,39,101,40,91,41,97,44,98,-1,0},
    /*167*/{11,169,-1,0},
    /*168*/{6,139,11,-80,17,-80,18,-80,33,-80,43,-80,-1,0},
    /*169*/{11,-11,17,-11,18,-11,33,-11,43,-11,-1,0},
    /*170*/{17,16,18,11,33,7,-1,0},
    /*171*/{8,-13,-1,0},
    /*172*/{7,174,-1,0},
    /*173*/{8,175,17,16,18,11,33,7,-1,0},
    /*174*/{10,183,-1,0},
    /*175*/{8,177,-1,0},
    /*176*/{10,178,-1,0},
    /*177*/{2,-6,10,-6,11,-6,16,-6,17,16,18,11,32,-6,33,7,35,8,36,-6,39,-6,40,-6,41,-6,44,-6,-1,0},
    /*178*/{2,4,10,90,11,-22,16,96,32,92,36,100,39,101,40,91,41,97,44,98,-1,0},
    /*179*/{11,181,-1,0},
    /*180*/{6,139,11,-80,17,-80,18,-80,33,-80,43,-80,-1,0},
    /*181*/{11,-10,17,-10,18,-10,33,-10,43,-10,-1,0},
    /*182*/{2,-6,10,-6,11,-6,16,-6,17,16,18,11,32,-6,33,7,35,8,36,-6,39,-6,40,-6,41,-6,44,-6,-1,0},
    /*183*/{2,4,10,90,11,-22,16,96,32,92,36,100,39,101,40,91,41,97,44,98,-1,0},
    /*184*/{11,186,-1,0},
    /*185*/{6,139,11,-80,17,-80,18,-80,33,-80,43,-80,-1,0},
    /*186*/{11,-9,17,-9,18,-9,33,-9,43,-9,-1,0},
    /*187*/{11,-3,-1,0},
    /*188*/{0,-2,-1,0},
    /*189*/{11,-7,-1,0},
    /*190*/{2,4,-1,0},
    /*191*/{7,19,-1,0},
    /*192*/{9,194,-1,0},
    /*193*/{2,4,3,24,4,32,5,26,7,36,30,33,38,30,42,28,-1,0},
    /*194*/{6,196,19,41,22,43,-1,0},
    /*195*/{2,-20,10,-20,11,-20,16,-20,17,-20,18,-20,32,-20,33,-20,35,-20,36,-20,39,-20,40,-20,41,-20,43,-20,44,-20,-1,0},
    /*196*/{0,-1,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,1,-1,-1},
    /*1*/{-1,-1},
    /*2*/{8,4,-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{10,11,11,14,15,8,16,12,17,9,-1,-1},
    /*6*/{-1,-1},
    /*7*/{8,192,-1,-1},
    /*8*/{11,190,15,8,16,189,-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{10,11,11,14,15,8,16,12,17,187,-1,-1},
    /*12*/{-1,-1},
    /*13*/{8,172,-1,-1},
    /*14*/{8,16,-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{11,82,13,80,14,83,-1,-1},
    /*19*/{-1,-1},
    /*20*/{4,33,5,24,6,30,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{-1,-1},
    /*31*/{-1,-1},
    /*32*/{7,34,8,28,22,46,23,21,-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{4,36,5,24,6,30,7,34,8,28,11,37,21,22,22,26,23,21,-1,-1},
    /*36*/{-1,-1},
    /*37*/{-1,-1},
    /*38*/{7,34,8,28,22,39,23,21,-1,-1},
    /*39*/{-1,-1},
    /*40*/{5,44,6,30,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*41*/{-1,-1},
    /*42*/{5,43,6,30,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{6,66,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*48*/{6,65,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*49*/{6,64,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*50*/{6,63,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*51*/{7,34,8,28,21,62,22,26,23,21,-1,-1},
    /*52*/{6,61,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*53*/{6,60,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*54*/{7,34,8,28,21,55,22,26,23,21,-1,-1},
    /*55*/{-1,-1},
    /*56*/{7,34,8,28,22,59,23,21,-1,-1},
    /*57*/{7,34,8,28,22,58,23,21,-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{4,71,5,24,6,30,7,34,8,28,18,72,21,22,22,26,23,21,-1,-1},
    /*68*/{4,69,5,24,6,30,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*69*/{-1,-1},
    /*70*/{-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{4,71,5,24,6,30,7,34,8,28,18,76,21,22,22,26,23,21,-1,-1},
    /*76*/{-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{8,162,-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{9,88,10,86,11,87,-1,-1},
    /*86*/{9,161,10,86,11,87,-1,-1},
    /*87*/{8,160,-1,-1},
    /*88*/{2,93,3,94,8,98,23,92,-1,-1},
    /*89*/{9,156,10,86,11,87,-1,-1},
    /*90*/{-1,-1},
    /*91*/{8,146,-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{2,135,3,94,8,98,23,92,-1,-1},
    /*95*/{-1,-1},
    /*96*/{4,127,5,24,6,30,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{8,108,-1,-1},
    /*100*/{-1,-1},
    /*101*/{4,103,5,24,6,30,7,34,8,28,20,102,21,22,22,26,23,21,-1,-1},
    /*102*/{-1,-1},
    /*103*/{-1,-1},
    /*104*/{4,103,5,24,6,30,7,34,8,28,20,105,21,22,22,26,23,21,-1,-1},
    /*105*/{-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{4,71,5,24,6,30,7,34,8,28,18,112,21,22,22,26,23,21,-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{-1,-1},
    /*115*/{-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{4,119,5,24,6,30,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*119*/{-1,-1},
    /*120*/{3,121,8,98,23,92,-1,-1},
    /*121*/{-1,-1},
    /*122*/{4,123,5,24,6,30,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*123*/{-1,-1},
    /*124*/{3,125,8,98,23,92,-1,-1},
    /*125*/{-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{4,130,5,24,6,30,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*130*/{-1,-1},
    /*131*/{3,132,8,98,23,92,-1,-1},
    /*132*/{-1,-1},
    /*133*/{3,134,8,98,23,92,-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{12,137,-1,-1},
    /*137*/{-1,-1},
    /*138*/{-1,-1},
    /*139*/{-1,-1},
    /*140*/{-1,-1},
    /*141*/{4,142,5,24,6,30,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*142*/{-1,-1},
    /*143*/{-1,-1},
    /*144*/{-1,-1},
    /*145*/{-1,-1},
    /*146*/{-1,-1},
    /*147*/{-1,-1},
    /*148*/{8,151,19,150,23,149,-1,-1},
    /*149*/{-1,-1},
    /*150*/{-1,-1},
    /*151*/{-1,-1},
    /*152*/{-1,-1},
    /*153*/{-1,-1},
    /*154*/{8,151,19,155,23,149,-1,-1},
    /*155*/{-1,-1},
    /*156*/{2,157,3,94,8,98,23,92,-1,-1},
    /*157*/{-1,-1},
    /*158*/{12,159,-1,-1},
    /*159*/{-1,-1},
    /*160*/{-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
    /*163*/{-1,-1},
    /*164*/{-1,-1},
    /*165*/{9,166,10,86,11,87,-1,-1},
    /*166*/{2,167,3,94,8,98,23,92,-1,-1},
    /*167*/{-1,-1},
    /*168*/{12,169,-1,-1},
    /*169*/{-1,-1},
    /*170*/{11,82,13,80,14,171,-1,-1},
    /*171*/{-1,-1},
    /*172*/{-1,-1},
    /*173*/{11,82,13,80,14,175,-1,-1},
    /*174*/{-1,-1},
    /*175*/{-1,-1},
    /*176*/{-1,-1},
    /*177*/{9,178,10,86,11,87,-1,-1},
    /*178*/{2,179,3,94,8,98,23,92,-1,-1},
    /*179*/{-1,-1},
    /*180*/{12,181,-1,-1},
    /*181*/{-1,-1},
    /*182*/{9,183,10,86,11,87,-1,-1},
    /*183*/{2,184,3,94,8,98,23,92,-1,-1},
    /*184*/{-1,-1},
    /*185*/{12,186,-1,-1},
    /*186*/{-1,-1},
    /*187*/{-1,-1},
    /*188*/{-1,-1},
    /*189*/{-1,-1},
    /*190*/{8,191,-1,-1},
    /*191*/{-1,-1},
    /*192*/{-1,-1},
    /*193*/{4,194,5,24,6,30,7,34,8,28,21,22,22,26,23,21,-1,-1},
    /*194*/{-1,-1},
    /*195*/{-1,-1},
    /*196*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {
              
    }

  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return Scanner.next_token(); 
    }


 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),  
			null);
     }
     public void report_fatal_error( String   message, Object   info)
	 throws java.lang.Exception
     {
	   done_parsing();
 	   report_error(message, info);
	   throw new SyntaxErrorException();
     }     

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {


  // only need to create one of these ever
  static public	intTypeNode		INTNode  = new intTypeNode(0,0);
  static public	boolTypeNode	BOOLNode = new boolTypeNode(0,0);
  static public	charTypeNode	CHARNode = new charTypeNode(0,0);
  static public voidTypeNode	VOIDNode = new voidTypeNode(0,0);


  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // optionalSemi ::= 
            {
              Symbol RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(12/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // optionalSemi ::= SEMI 
            {
              Symbol RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(12/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ident ::= IDENTIFIER 
            {
              identNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new identNode(i.identifierText, i.linenum, i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(8/*ident*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // name ::= ident LBRACKET expr RBRACKET 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
			RESULT = new nameNode(i, e, i.linenum, i.colnum); 
			
              CUP$result = new java_cup.runtime.Symbol(23/*name*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // name ::= ident 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
				RESULT = new nameNode(i, i.linenum, i.colnum); 
			
              CUP$result = new java_cup.runtime.Symbol(23/*name*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unit ::= LPAREN expr RPAREN 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				RESULT = e;
			
              CUP$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unit ::= rw_FALSE 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken f = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
				RESULT = new falseNode(f.linenum, f.colnum); 
			
              CUP$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unit ::= rw_TRUE 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
				RESULT = new trueNode(t.linenum, t.colnum); 
			
              CUP$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unit ::= STRLIT 
            {
              exprNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXStringLitToken s = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
				RESULT = new strLitNode(s.stringText, s.linenum, s.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unit ::= CHARLIT 
            {
              exprNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXCharLitToken c = (CSXCharLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
				RESULT = new charLitNode(c.charValue, c.linenum, c.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unit ::= INTLIT 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXIntLitToken i = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
				RESULT = new intLitNode(i.intValue, i.linenum, i.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unit ::= ident LPAREN args RPAREN 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode id = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				RESULT = new fctCallNode(id, a, id.linenum, id.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unit ::= ident LPAREN RPAREN 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		identNode id = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
				RESULT = new fctCallNode(id, argsNodeOption.NULL, id.linenum, id.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unit ::= name 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				RESULT = n;
			
              CUP$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unary ::= unit 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = u;
		
              CUP$result = new java_cup.runtime.Symbol(22/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unary ::= LPAREN type RPAREN unary 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new castNode(t, u, l.linenum, l.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(22/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unary ::= NOT unary 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken n = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new unaryOpNode(sym.NOT, u, n.linenum, n.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(22/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pri ::= unary 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = u;
		
              CUP$result = new java_cup.runtime.Symbol(21/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // pri ::= pri SLASH unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(p, sym.SLASH, u, p.linenum, p.colnum, 
														ASTNode.Types.Integer);
		
              CUP$result = new java_cup.runtime.Symbol(21/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pri ::= pri TIMES unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(p, sym.TIMES, u, p.linenum, p.colnum, 
														ASTNode.Types.Integer);
		
              CUP$result = new java_cup.runtime.Symbol(21/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= pri 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = p;
		
              CUP$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= factor MINUS pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(f, sym.MINUS, p, f.linenum, f.colnum, 
														ASTNode.Types.Integer);
		
              CUP$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= factor PLUS pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(f, sym.PLUS, p, f.linenum, f.colnum,
														ASTNode.Types.Integer);
		
              CUP$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = f;
		
              CUP$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= factor NOTEQ factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(f1, sym.NOTEQ, f2, f1.linenum, f1.colnum, 
														ASTNode.Types.Boolean);
		
              CUP$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor EQ factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(f1, sym.EQ, f2, f1.linenum, f1.colnum, 
														ASTNode.Types.Boolean);
		
              CUP$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= factor GEQ factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(f1, sym.GEQ, f2, f1.linenum, f1.colnum, 
														ASTNode.Types.Boolean);
		
              CUP$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= factor LEQ factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(f1, sym.LEQ, f2, f1.linenum, f1.colnum,
														ASTNode.Types.Boolean);
		
              CUP$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= factor GT factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(f1, sym.GT, f2, f1.linenum, f1.colnum, 
														ASTNode.Types.Boolean);
		
              CUP$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= factor LT factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(f1, sym.LT, f2, f1.linenum, f1.colnum, 
														ASTNode.Types.Boolean);
		
              CUP$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= term 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = t;
		
              CUP$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr CAND term 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(e, sym.CAND,t, e.linenum, e.colnum, 
														ASTNode.Types.Boolean);
		
              CUP$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr COR term 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new binaryOpNode(e, sym.COR, t, e.linenum, e.colnum, 
														ASTNode.Types.Boolean);
		
              CUP$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // printlist ::= expr 
            {
              printNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT= new printNode(e,printNodeOption.NULL,e.linenum,e.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(20/*printlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // printlist ::= expr COMMA printlist 
            {
              printNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		printNode pl = (printNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new printNode(e, pl, e.linenum, e.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(20/*printlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // readlist ::= name 
            {
              readNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new readNode(n,readNodeOption.NULL,n.linenum,n.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(19/*readlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // readlist ::= name COMMA readlist 
            {
              readNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		readNode rl = (readNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new readNode(n, rl, n.linenum, n.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(19/*readlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // args ::= expr 
            {
              argsNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new argsNode(e,argsNodeOption.NULL,e.linenum,e.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(18/*args*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // args ::= expr COMMA args 
            {
              argsNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new argsNode(e, a, e.linenum, e.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(18/*args*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= rw_CHAR 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT = new charTypeNode(t.linenum, t.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(11/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= rw_BOOL 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT=new boolTypeNode(t.linenum, t.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(11/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= rw_INT 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			RESULT=new intTypeNode(t.linenum, t.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(11/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
	  		RESULT=new blockNode(f,s, l.linenum, l.colnum); 
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= rw_CONTINUE ident SEMI 
            {
              stmtNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
			RESULT = new continueNode(i, c.linenum, c.colnum); 
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= rw_BREAK ident SEMI 
            {
              stmtNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken b = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
			RESULT = new breakNode(i, b.linenum, b.colnum); 
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= rw_RETURN expr SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
			RESULT = new returnNode(e, r.linenum, r.colnum); 
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= rw_RETURN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
			RESULT = new returnNode(exprNodeOption.NULL, r.linenum, r.colnum); 
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= ident LPAREN args RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		identNode id = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		argsNodeOption as = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
			RESULT = new callNode(id, as, id.linenum, id.colnum); 
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= ident LPAREN RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode id = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		 
			RESULT = new callNode(id, argsNodeOption.NULL, id.linenum, id.colnum); 
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= rw_PRINT LPAREN printlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken p = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		printNode pl = (printNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
			RESULT = new printNode(new strLitNode("first" , -1, p.colnum), pl, p.linenum, p.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= rw_READ LPAREN readlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		readNode rl = (readNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
			RESULT = new readNode(new nameNode(new identNode("first" , -1, r.colnum),r.linenum, r.colnum), rl, r.linenum, r.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= name DECREMENT SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
			RESULT = new decrementNode(n, n.linenum, n.colnum); 
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= name INCREMENT SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
			RESULT = new incrementNode(n, n.linenum, n.colnum); 
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= name ASG expr SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
			RESULT = new asgNode(n, e, n.linenum, n.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= ident COLON rw_WHILE LPAREN expr RPAREN stmt 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		identNode id = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
			RESULT = new whileNode(id, e, s, w.linenum, w.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= rw_WHILE LPAREN expr RPAREN stmt 
            {
              stmtNode RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
			RESULT = new whileNode(exprNode.NULL, e, s, w.linenum, w.colnum); 
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= rw_IF LPAREN expr RPAREN stmt rw_ELSE stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode e2 = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new ifThenNode(e, s, e2, i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= rw_IF LPAREN expr RPAREN stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
			RESULT=new ifThenNode(e, s, i.linenum, i.colnum); 
		
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmts ::= 
            {
              stmtsOption RESULT = null;
		 
			RESULT= stmtsNode.NULL; 
		
              CUP$result = new java_cup.runtime.Symbol(2/*stmts*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmts ::= stmt stmts 
            {
              stmtsOption RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtsOption s2 = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
			RESULT= new stmtsNode(s1, s2, s1.linenum, s1.colnum);
		
              CUP$result = new java_cup.runtime.Symbol(2/*stmts*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fielddecl ::= rw_CONST ident ASG expr SEMI 
            {
              declNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				RESULT= new constDeclNode(i, e, c.linenum, c.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(10/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fielddecl ::= type ident LBRACKET INTLIT RBRACKET SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXIntLitToken il = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
			 	RESULT= new arrayDeclNode(i, t, new intLitNode(il.intValue, 
			 					il.linenum, il.colnum), t.linenum, t.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(10/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fielddecl ::= type ident ASG expr SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
				RESULT= new varDeclNode(i, t, e, t.linenum, t.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(10/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fielddecl ::= type ident SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
				RESULT= new varDeclNode(i,t,exprNode.NULL, t.linenum,
																t.colnum); 
			
              CUP$result = new java_cup.runtime.Symbol(10/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argdecl ::= type ident LBRACKET RBRACKET 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
				RESULT= new arrayArgDeclNode(i, t, t.linenum, t.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(13/*argdecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // argdecl ::= type ident 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				RESULT= new valArgDeclNode(i, t, t.linenum, t.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(13/*argdecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // argdecls ::= argdecl 
            {
              argDeclsOption RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argDeclNode arg = (argDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				RESULT= new argDeclsNode(arg, argDeclsNode.NULL, 
											 arg.linenum, arg.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(14/*argdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // argdecls ::= argdecl COMMA argdecls 
            {
              argDeclsOption RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		argDeclNode arg = (argDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argDeclsOption args = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				RESULT= new argDeclsNode(arg, args, arg.linenum,arg.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(14/*argdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methoddecl ::= type ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		argDeclsOption args = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
				RESULT= new methodDeclNode(i, args, t, f, s, t.linenum, 
																	t.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(15/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methoddecl ::= type ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
				RESULT= new methodDeclNode(i, argDeclsNode.NULL, t, f, s, 
										 				t.linenum, t.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(15/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methoddecl ::= rw_VOID ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		argDeclsOption args = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
				RESULT= new methodDeclNode(i, args, 
										new voidTypeNode(v.linenum, v.colnum), 
										f, s, v.linenum, v.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(15/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // methoddecl ::= rw_VOID ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
				RESULT= new methodDeclNode(i, argDeclsNode.NULL, 
										new voidTypeNode(v.linenum, v.colnum), 
										f, s, v.linenum, v.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(15/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methoddecls ::= 
            {
              methodDeclsOption RESULT = null;
		
				RESULT= methodDeclsNode.NULL;
			
              CUP$result = new java_cup.runtime.Symbol(16/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methoddecls ::= methoddecl methoddecls 
            {
              methodDeclsOption RESULT = null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		methodDeclNode md = (methodDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		methodDeclsOption mds = (methodDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
				RESULT= new methodDeclsNode(md, mds, md.linenum, md.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(16/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fielddecls ::= 
            {
              fieldDeclsOption RESULT = null;
		 
				RESULT= fieldDeclsNode.NULL; 
			
              CUP$result = new java_cup.runtime.Symbol(9/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fielddecls ::= fielddecl fielddecls 
            {
              fieldDeclsOption RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		declNode f1 = (declNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		fieldDeclsOption f2 = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
			 	RESULT= new fieldDeclsNode(f1,f2, f1.linenum,f1.colnum); 
			
              CUP$result = new java_cup.runtime.Symbol(9/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= methoddecls 
            {
              memberDeclsNode RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		methodDeclsOption m = (methodDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				RESULT= new memberDeclsNode(fieldDeclsNode.NULL, m, 
													m.linenum, m.linenum);
			
              CUP$result = new java_cup.runtime.Symbol(17/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecl memberdecls 
            {
              memberDeclsNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		declNode f = (declNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
				RESULT= new memberDeclsNode(new fieldDeclsNode(f, m.fields, 
					f.linenum, f.colnum), m.methods, f.linenum, f.colnum);
			
              CUP$result = new java_cup.runtime.Symbol(17/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= rw_CLASS ident LBRACE memberdecls RBRACE 
            {
              classNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		memberDeclsNode d = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
			 	RESULT=	new classNode(i, d, c.linenum, c.colnum); 
			 
              CUP$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		classNode start_val = (classNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		RESULT = start_val;
              CUP$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

